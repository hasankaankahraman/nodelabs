import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:nodelabs/core/cubits/movie_cubit/movie_cubit.dart';
import 'package:nodelabs/core/cubits/movie_cubit/movie_state.dart';
import '../widgets/movie_card_widget.dart';

class MovieListWidget extends StatefulWidget {
  final String userToken;

  const MovieListWidget({Key? key, required this.userToken}) : super(key: key);

  @override
  _MovieListWidgetState createState() => _MovieListWidgetState();
}

class _MovieListWidgetState extends State<MovieListWidget> {
  final PageController _pageController = PageController();
  bool _isFetching = false; // ğŸ“Œ AynÄ± anda birden fazla istek atÄ±lmasÄ±nÄ± engellemek iÃ§in

  @override
  void initState() {
    super.initState();
    context.read<MovieCubit>().fetchMovies(widget.userToken); // Ä°lk yÃ¼kleme

    // ğŸ“Œ Sayfa deÄŸiÅŸiminde yeni veri Ã§ekmek iÃ§in listener ekle
    _pageController.addListener(_handleScroll);
  }

  void _handleScroll() {
    if (_pageController.position.pixels == _pageController.position.maxScrollExtent) {
      if (!_isFetching) {
        setState(() => _isFetching = true); // Yeni istek baÅŸlamadan Ã¶nce isFetching'i gÃ¼ncelle

        context.read<MovieCubit>().fetchMovies(widget.userToken, isLoadMore: true);

        // API Ã§aÄŸrÄ±sÄ± tamamlandÄ±ktan sonra tekrar veri Ã§ekilmesini saÄŸlamak iÃ§in gecikme ekleyelim
        Future.delayed(Duration(seconds: 1), () {
          if (mounted) {
            setState(() => _isFetching = false);
          }
        });
      }
    }
  }

  @override
  void dispose() {
    _pageController.removeListener(_handleScroll); // ğŸ“Œ Listener'Ä± kaldÄ±r
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<MovieCubit, MovieState>(
      builder: (context, state) {
        if (state is MovieLoading && state is! MovieLoaded) {
          return Center(child: CircularProgressIndicator());
        } else if (state is MovieLoaded) {
          return PageView.builder(
            controller: _pageController,
            scrollDirection: Axis.vertical, // ğŸ“Œ TikTok tarzÄ± dikey kaydÄ±rma
            itemCount: state.movies.length + 1, // ğŸ“Œ Ekstra 1 ekleyerek "yÃ¼kleniyor" gÃ¶sterebiliriz
            itemBuilder: (context, index) {
              if (index == state.movies.length) {
                return Center(child: CircularProgressIndicator()); // ğŸ“Œ Yeni veriler yÃ¼klenirken gÃ¶ster
              }
              return MovieCardWidget(movie: state.movies[index]);
            },
          );
        } else {
          return Center(child: Text("Bir hata oluÅŸtu", style: TextStyle(color: Colors.white)));
        }
      },
    );
  }
}
